============================================
1-my_list module
============================================

Doc test for the 1-my_list function. Prints the list, but sorted (ascending sort)
============================================

Import the function:

    >>> MyList = __import__('1-my_list').MyList
    >>>

No arguments - will return an empty list

    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

    >>> print(my_list)
    []

Single argument - must be an iterable object

    >>> my_list = MyList([3, 5, 7])
    >>> print(my_list)
    [3, 5, 7]

    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable

More than 1 argument - TypeError is raised

    >>> my_list = MyList([3, 5, 7], [1,4])
    Traceback (most recent call last):
    TypeError: list expected at most 1 argument, got 2

Using the append() method:

    >>> my_list = MyList()
    >>> my_list.append(100)
    >>> my_list.append(150)
    >>> my_list.append(500)
    >>> my_list.append(45)
    >>> my_list.append(1500)
    >>> my_list.append(88)
    >>> print(my_list)
    [100, 150, 500, 45, 1500, 88]

Using the replace with indexing method:

    >>> my_list[1] = 33
    >>> print(my_list)
    [100, 33, 500, 45, 1500, 88]

Using the remove() method:

    >>> my_list.remove(1500)
    >>> print(my_list)
    [100, 33, 500, 45, 88]

Using the print_sorted(self) method - takes no arguments:

    >>> my_list = MyList()
    >>> print(my_list.print_sorted)
    <bound method MyList.print_sorted of []>

A TypeError is raised if an arguemnt is given:

    >>> my_list.print_sorted(1)
    Traceback (most recent call last):
    TypeError: MyList.print_sorted() takes 1 positional argument but 2 were given

The print_sorted() method prints a list in ascending order.

    >>> my_list.append(100)
    >>> my_list.append(33)
    >>> my_list.append(500)
    >>> my_list.append(45)
    >>> my_list.append(88)
    >>> print(my_list)
    [100, 33, 500, 45, 88]

    my_list.print_sorted()
    [33, 45, 88, 100, 500]

The original list is not altered despite calling the print_sorted() method:

    >>> print(my_list)
    [100, 33, 500, 45, 88]

If a list of strings is given, it is sorted lexicographically (sorted in a way
that uses an algorithm based on the alphabetical order used in dictionaries)

    >>> my_list = MyList()
    >>> my_list.append("Preferred")
    >>> my_list.append("Languages")
    >>> my_list.append("Malbolge")
    >>> my_list.append("Fortran")
    >>> my_list.append("Cobol")
    >>> my_list.append("Assembly")
    >>> my_list.append('C')

    print(my_list)
    ['Preferred', 'Languages', 'Malbolge', 'Fortran', 'Cobol', 'Assembly', 'C']
    
    my_list.print_sorted()
    ['Assembly', 'C', 'Cobol', 'Fortran', 'Languages', 'Malbolge', 'Preferred']

The original list is not altered despite calling the print_sorted() method:

    print(my_list)
    ['Preferred', 'Languages', 'Malbolge', 'Fortran', 'Cobol', 'Assembly']

Empty lists are not sorted:

    >>> my_list = MyList()

If a list contains different data types, a TypeError is raised:

    my_list = MyList([100, "Malbolge", "Fortran", 45])
    my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: unorderable types: str() < int()
