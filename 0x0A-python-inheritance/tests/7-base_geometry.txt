============================================
7-base_geometry module
============================================

Doc test for the 7-base_geometry function. Defines a class - BaseGeometry
============================================

Import the function:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>>

BaseGeometry() takes no arguments / parameters:

    >>> bg = BaseGeometry()
    >>> type(bg)
    <class '7-base_geometry.BaseGeometry'>

    >>> print(bg) # doctest: +ELLIPSIS
    <7-base_geometry.BaseGeometry object at ...>
 
If any argument is given to the BaseGeometry(), a TypeError is raised:

    >>> bg = BaseGeometry(None)
    Traceback (most recent call last):
    TypeError: object() takes no parameters

Methods: the BaseGeometry() has 2 methods:
==========================================

Area(self):

    >>> bg = BaseGeometry()
    print(bg.area)
    <bound method BaseGeometry.area of <7-base_geometry.BaseGeometry object at ...>>

Area(...) - not implemented yet. Will raise an Exception error:

    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

Integer_validator(self, name, value) - Validates the integer value of an argument.
Name (name of the argument to be checked) && value (argument to check):

    >>> print(bg.integer_validator)
    <bound method BaseGeometry.integer_validator of <7-base_geometry.BaseGeometry object at ...>>

If value is a valid integer, the function does nothing:

    >>> bg.integer_validator("valid num", 2)

If value is not a valid integer, a TypeError is raised:

    >>> bg.integer_validator("invalid num", "not a num")
    Traceback (most recent call last):
    TypeError: invalid num must be an integer

    >>> bg.integer_validator("still invalid", Yes)
    Traceback (most recent call last):
    TypeError: still invalid must be an integer

    >>> bg.integer_validator("so invalid", (4,))
    Traceback (most recent call last):
    TypeError: so invalid must be an integer

    >>> bg.integer_validator("invalid again", [5])
    Traceback (most recent call last):
    TypeError: invalid again must be an integer

    >>> bg.integer_validator("invalid input", {5, 8})
    Traceback (most recent call last):
    TypeError: invalid input must be an integer

    >>> bg.integer_validator("can't use this", None)
    Traceback (most recent call last):
    TypeError: can't use this must be an integer

If value is an integer, but < 0 || == 0, a ValueError is raised:

    >>> bg.integer_validator("invalid integer", -3)
    Traceback (most recent call last):
    ValueError: invalid integer must be greayerv than 0

    >>> bg.integer_validator("still invalid int", 0)
    Traceback (most recent call last):
    ValueError: still invalid int must be greayerv than 0

If name and value are not provided, a TypeError is raised - both must be provided:

    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    >>> bg.integer_validator(None)
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

integer_validator() assumes the parameter 'name' will be a string, but name of any type will be printed:

    >>> bg.integer_validator({"b": 2}, (1, 4))
    Traceback (most recent call last):
    TypeError: {'b': 2} must be an integer
