============================================
0-add_integer module
============================================

Unit test for the add_integer function. Returns the sum of two integers
============================================

Import the function:

    >>> add_integer = __import__('0-add_integer').add_integer

Run tests:

    >>> add_integer(4, 5)
    9

    >>> add_integer(5, -11)
    -6

Integers and floats can be added together:

    >>> add_integer(3, 1.0)
    4

Should work with floats as well:

    >>> add_integer(6.0, 12.0)
    18

Floats should be casted to ints before operation:

    >>> add_integer(15.3, 5.1)
    20

The second argument is optional, and is by default 98 ie (a, b=98):

    >>> add_integer(3)
    101

Both arguments should be either ints/floats. If either args is a non-int
and non-float, a TypeError is raised:

    >>> add_integer("Nocturnal Animal", 5)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(5, "Girls that code")
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

If both args are non-ints and non-floats, a TypeError message is printed only
for the first argument:

    >>> add_integer("Do Hard", "Things")
    Traceback (most recent call last):
    TypeError: a must be an integer

Function fails if infinity is provided for floats, and NaN numbers as well:

    >>> add_integer(5, float('inf'))
    Traceback (most recent call last):
    OverFlowError: cannot convert float infinity to integer

    >>> add_integer(5, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
